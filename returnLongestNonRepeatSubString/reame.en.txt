Use 8 languages (Javascript,Java,C#,Swift,Kotlin,Python,C++,Golang) to find the longest substring

I am trying to use the fastest way in each language, if you find any better solution, please let me know.

Given a string str, find the longest substring without repeating characters.

For “ABDEFGABEF”, the longest substring is “BDEFGA” and “DEFGAB”, with length 6.
For “BBBB” the longest substring is “B”, with length 1.
For “neatcoding” the longest substring is “neatcodi”, with length 8.

The desired time complexity is O(n) where n is the length of the string.

We are going to loop through this string character by character
Check this character is inside the current substring, if yes, save the current substring into substring collection, create a new substring using this character as the starting value;
                                                           if no, add this character to the current substring;

At this point, the loop is over, check if the current substring is empty, if yes, do nothing
                                                                          if no, add it to the substring collection


We set an object to store the longest substring,
Now, let's loop through the substring collection, and find the longest one                    
    check if the current substring is longer, if yes, replace the longest string
                                              if no, do nothing

In the end, we have the longest substring.

Let's code.

In Javascript:

returnLongestNonRepeatSubString = (s) => {
    if(!s){
      return "";
    }
 
    let subCollection = [];
    let currentSub = "";
    let currentSet = new Set;
    for(let i = 0; i < s.length; i ++) {
      let c = s[i];
      if(!currentSet.has(c)) {
        currentSub +=c;
        currentSet.add(c);
      } 
      else {
        subCollection.push(currentSub);
        currentSub = [];
        currentSet.clear();
        currentSub = "" + c;
        currentSet.add(c);
      }
    }
 
    if(currentSub.length > 0){
      subCollection.push(currentSub);
    }
 
    let longest = ""; 
    for(let i = 0 ; i < subCollection.length ; i ++) {
      let sub = subCollection[i];
      if(sub.length > longest.length)  {
        longest = sub;
      }
    }
 
    return longest;
  }
 
  
console.log(returnLongestNonRepeatSubString("ABDEFGABEF"))
console.log(returnLongestNonRepeatSubString("BBBB"))
console.log(returnLongestNonRepeatSubString("neatcoding"))

In C#:

    
using System;
using System.Text;
using System.Collections.Generic;
					
public class NeatCoding
{
	public static void Main(string[] args)
	{
		//Your code goes here
		Console.WriteLine(returnLongestNonRepeatSubString("ABDEFGABEF"));
		Console.WriteLine(returnLongestNonRepeatSubString("BBBB"));
		Console.WriteLine(returnLongestNonRepeatSubString("neatcoding"));
	}

	static string returnLongestNonRepeatSubString(string s)
	{
		if (string.IsNullOrEmpty(s))
		{
			return "";
		}

		List<string> subCollection = new List<string>();
		StringBuilder currentSub = new StringBuilder();
		HashSet<char> hashChar = new HashSet<char>();
		for (int i = 0; i < s.Length; i++)
		{
			char c = s[i];
			if (!hashChar.Contains(c))
			{
				hashChar.Add(c);
				currentSub.Append(c);
			}
			else
			{
				subCollection.Add(currentSub.ToString());
				hashChar.Clear();
				currentSub.Clear();				
				currentSub.Append(c);
				hashChar.Add(c);
			}
		}

		if (currentSub.Length > 0)
		{
			subCollection.Add(currentSub.ToString());
		}

		string longest = "";
		for (int i = 0; i < subCollection.Count; i++)
		{
			string sub = subCollection[i];
			if (sub.Length > longest.Length)
			{
				longest = sub;
			}
		}

		return longest;
	}
}

In Java:

import java.util.*;

public class NeatCoding{

     public static void main(String []args){
        System.out.println(returnLongestNonRepeatSubString("ABDEFGABEF"));
        System.out.println(returnLongestNonRepeatSubString("BBBB"));
        System.out.println(returnLongestNonRepeatSubString("neatcoding"));
     }
         
    static String returnLongestNonRepeatSubString(String s)
    {
       if (s == null || s.length() == 0)
       {
           return "";
       }
    
       List<String> subCollection = new ArrayList<String>();
       HashSet<Character> set=new HashSet();  
       StringBuilder currentSub = new StringBuilder();
       for (int i = 0; i < s.length(); i++)
       {
           char c = s.charAt(i);
           if (!set.contains(c))
           {
               currentSub.append(c);
           }
           else
           {
               set.add(c);
               subCollection.add(currentSub.toString());
               currentSub.setLength(0);
               currentSub.append(c);
           }
       }
    
       if (currentSub.length() > 0)
       {
           subCollection.add(currentSub.toString());
       }
    
       String longest = "";
       for (int i = 0; i < subCollection.size(); i++)
       {
           String sub = subCollection.get(i);
           if (sub.length() > longest.length())
           {
               longest = sub;
           }
       }
    
       return longest;
    }
}

In Kotlin:

fun main() {
    println(returnLongestNonRepeatSubString("ABDEFGABEF"))
    println(returnLongestNonRepeatSubString("BBBB"))
    println(returnLongestNonRepeatSubString("neatcoding"))
}

fun returnLongestNonRepeatSubString(s: String?): String {
   if (s == null || s.length == 0) {
       return ""
   }

   val subCollection = ArrayList<String>()
   var currentSub = ""
   var currentSet: HashSet<Char> = HashSet()  
   for (i in 0 until s.length) {
       val c = s[i]
       if (!currentSet.contains(c)) {
           currentSub += c
           currentSet.add(c)
       } else {
           subCollection.add(currentSub)
           currentSub = "" + c
           currentSet.clear() 
           currentSet.add(c)
       }
   }

   if (currentSub.length > 0) {
       subCollection.add(currentSub)
   }

   var longest = ""
   for (i in subCollection.indices) {
       val sub = subCollection[i]
       if (sub.length > longest.length) {
           longest = sub
       }
   }

   return longest
}

In Golang:

package main

import (
	"fmt"
	"bytes"
)

func main() {
	fmt.Println(returnLongestNonRepeatSubString("ABDEFGABEF"))
	fmt.Println(returnLongestNonRepeatSubString("BBBB"))
	fmt.Println(returnLongestNonRepeatSubString("neatcoding"))
}


func returnLongestNonRepeatSubString(s string) string {
  if len(s) == 0 {
     return ""
  }
  var subCollection []string
  var currentSub bytes.Buffer
  currentMap := map[byte]bool{}

  for i := 0; i < len(s); i++ {
     var c = s[i]

    _, ok := currentMap[c]
    if !ok {
        currentSub.WriteByte(c)
	currentMap[c] = true
     } else {
        subCollection = append(subCollection, currentSub.String())
        currentSub .Reset()
        currentSub.WriteByte(c)
        currentMap = map[byte]bool{}
	currentMap[c] = true
     }
  }

  if currentSub.Len() > 0 {
     subCollection = append(subCollection, currentSub.String())
  }

  var longest = ""

  for _, sub := range subCollection {
     if  len(sub) > len(longest) {
        longest = sub
     }
  }
  return longest
}

In c++:


#include <iostream>
#include <vector>
#include <set>
#include <sstream>
using namespace std;


string
returnLongestNonRepeatSubString (const string & s)
{
    if (s.empty ())
    {
        return "";
    }
    std::vector <string> subCollection;
    stringstream currentSub;
    set <char> currentSet;
    for (int i = 0; i < s.length (); i++)
    {
        char c = s[i];
        if (currentSet.find (c) == currentSet.end())
        {
            currentSub << c;
            currentSet.insert(c);
        }
        else
        {
            subCollection.push_back (currentSub.str());
            currentSub.clear();
            currentSub << c;
             
            currentSet.clear();
            currentSet.insert(c);
        }
    }

    if( currentSub.gcount() > 0)
    {
        subCollection.push_back (currentSub.str());
    }

    string longest = "";

    for (int i = 0; i < subCollection.size(); i++)
    {
        string sub = subCollection.at(i);
        if (sub.length() > longest.length())
        {
            longest = sub;
        }
    }
    return longest;
}

int main()
{
    cout<<returnLongestNonRepeatSubString("ABDEFGABEF")<<std::endl;
    cout<<returnLongestNonRepeatSubString("BBBB")<<std::endl;
    cout<<returnLongestNonRepeatSubString("neatcoding")<<std::endl;

    return 0;
}


In Python:

def returnLongestNonRepeatSubString(s):
    if not s:
        return ""
    subCollection = []
    currentSub = []
    currentSet = set()
    for c in s:
        if (c not in currentSet):
            currentSet.add(c)
            currentSub.append(c)
        else:
            subCollection.append(''.join(currentSub))
            currentSub = [c]
            currentSet.clear()
            currentSet.add(c)
    
    if len(currentSub) > 0:
        subCollection.append(''.join(currentSub))
    
    longest = ""
    for sub in subCollection:
        if (len(sub) > len(longest)):
            longest = sub
            
    return longest

print(returnLongestNonRepeatSubString("ABDEFGABEF"))
print(returnLongestNonRepeatSubString("BBBB"))
print(returnLongestNonRepeatSubString("neatcoding"))


In Swift:

import Foundation


func returnLongestNonRepeatSubString (s: String) -> String {
 
  if (s == nil || s.isEmpty) {
           return ""
  }
  var subCollection =  [String]()
  var currentSub = ""
  var currentSet = Set<Character>()
  for c in s {
       currentSet.contains(c)
      if !currentSet.contains(c)  {
          currentSet.insert(c)
          currentSub.append(c)
      }
      else {
          subCollection.append(currentSub);
          currentSet = []
          currentSub = String(c)
          currentSet.insert(c)
      }
  } 

  if currentSub.count > 0 {
        subCollection.append(currentSub);
  }

   var longest = ""
   for sub in subCollection {
        if sub.length > longest.length {
            longest = sub
        }
   }
 
   return longest
 
}
print(returnLongestNonRepeatSubString(s: "ABDEFGABEF"))
print(returnLongestNonRepeatSubString(s: "BBBB"))
print(returnLongestNonRepeatSubString(s: "neatcoding"))




